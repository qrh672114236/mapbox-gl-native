<%
  const paintProperties = locals.paintProperties;
  const layoutProperties = locals.layoutProperties;
-%>
// This file is generated. Edit android/platform/scripts/generate-style-code.js, then run `make android-style-code`.

package com.mapbox.mapboxsdk.style.layers;

import android.support.annotation.ColorInt;

import com.mapbox.mapboxsdk.style.expressions.Expression;
import com.mapbox.mapboxsdk.utils.ColorUtils;

/**
 * Constructs paint/layout properties for Layers
 *
 * @see <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers">Layer style documentation</a>
 */
public class PropertyFactory {

  /**
   * Set the property visibility.
   *
   * @param value the visibility value
   * @return property wrapper around visibility
   */
  public static PropertyValue<String> visibility(@Property.VISIBILITY String value) {
    return new LayoutPropertyValue<>("visibility", value);
  }

<% for (const property of paintProperties) { -%>
<% if (property.type == 'color') { -%>
  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param value a int color value
   * @return property wrapper around String color
   */
  public static PropertyValue<String> <%- camelizeWithLeadingLowercase(property.name) %>(@ColorInt int value) {
    return new PaintPropertyValue<>("<%-  property.name %>", colorToRgbaString(value));
  }

<% } -%>
  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param value a <%- propertyType(property) %> value
   * @return property wrapper around <%- propertyType(property) %>
   */
  public static PropertyValue<<%- propertyType(property) %>> <%- camelizeWithLeadingLowercase(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), " ") %><%- propertyType(property) %> value) {
    return new PaintPropertyValue<>("<%-  property.name %>", value);
  }

  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param expression an expression statement
   * @return property wrapper around an expression statement
   */
  public static PropertyValue<Expression> <%- camelizeWithLeadingLowercase(property.name) %>(Expression expression) {
    return new PaintPropertyValue<>("<%-  property.name %>", expression);
  }

<% } -%>
<% for (const property of layoutProperties) { -%>
  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param value a <%- propertyType(property) %> value
   * @return property wrapper around <%- propertyType(property) %>
   */
  public static PropertyValue<<%- propertyType(property) %>> <%- camelizeWithLeadingLowercase(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), " ") %><%- propertyType(property) %> value) {
    return new LayoutPropertyValue<>("<%-  property.name %>", value);
  }

  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param value a <%- propertyType(property) %> value
   * @return property wrapper around <%- propertyType(property) %>
   */
  public static PropertyValue<Expression> <%- camelizeWithLeadingLowercase(property.name) %>(Expression value) {
    return new LayoutPropertyValue<>("<%-  property.name %>", value);
  }

<% } -%>
  /**
   * Converts Android color int to "rbga(r, g, b, a)" String equivalent.
   * <p>
   * Alpha value will be converted from 0-255 range to 0-1.
   * </p>
   *
   * @param color Android color int
   * @return String rgba color
   * @deprecated use {@link com.mapbox.mapboxsdk.utils.ColorUtils#colorToRgbaString(int)} instead
   */
  @Deprecated
  public static String colorToRgbaString(@ColorInt int color) {
    return ColorUtils.colorToRgbaString(color);
  }

  /**
   * Converts Android color int to rgba float array.
   * <p>
   * Alpha value will be converted from 0-255 range to 0-1.
   * </p>
   *
   * @param color Android color int
   * @return int rgba array
   * @deprecated use {@link com.mapbox.mapboxsdk.utils.ColorUtils#colorToRgbaArray(int)} instead
   */
  @Deprecated
  public static float[] colorToRgbaArray(@ColorInt int color) {
    return ColorUtils.colorToRgbaArray(color);
  }
}